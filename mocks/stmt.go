// Code generated by MockGen. DO NOT EDIT.
// Source: tests/interfaces/stmt.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	driver "database/sql/driver"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStmtWithContext is a mock of StmtWithContext interface.
type MockStmtWithContext struct {
	ctrl     *gomock.Controller
	recorder *MockStmtWithContextMockRecorder
}

// MockStmtWithContextMockRecorder is the mock recorder for MockStmtWithContext.
type MockStmtWithContextMockRecorder struct {
	mock *MockStmtWithContext
}

// NewMockStmtWithContext creates a new mock instance.
func NewMockStmtWithContext(ctrl *gomock.Controller) *MockStmtWithContext {
	mock := &MockStmtWithContext{ctrl: ctrl}
	mock.recorder = &MockStmtWithContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStmtWithContext) EXPECT() *MockStmtWithContextMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStmtWithContext) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStmtWithContextMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtWithContext)(nil).Close))
}

// Exec mocks base method.
func (m *MockStmtWithContext) Exec(args []driver.Value) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockStmtWithContextMockRecorder) Exec(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtWithContext)(nil).Exec), args)
}

// ExecContext mocks base method.
func (m *MockStmtWithContext) ExecContext(ctx context.Context, args []driver.NamedValue) (driver.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContext", ctx, args)
	ret0, _ := ret[0].(driver.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockStmtWithContextMockRecorder) ExecContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockStmtWithContext)(nil).ExecContext), ctx, args)
}

// NumInput mocks base method.
func (m *MockStmtWithContext) NumInput() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumInput")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumInput indicates an expected call of NumInput.
func (mr *MockStmtWithContextMockRecorder) NumInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumInput", reflect.TypeOf((*MockStmtWithContext)(nil).NumInput))
}

// Query mocks base method.
func (m *MockStmtWithContext) Query(args []driver.Value) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockStmtWithContextMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtWithContext)(nil).Query), args)
}

// QueryContext mocks base method.
func (m *MockStmtWithContext) QueryContext(ctx context.Context, args []driver.NamedValue) (driver.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryContext", ctx, args)
	ret0, _ := ret[0].(driver.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockStmtWithContextMockRecorder) QueryContext(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockStmtWithContext)(nil).QueryContext), ctx, args)
}
